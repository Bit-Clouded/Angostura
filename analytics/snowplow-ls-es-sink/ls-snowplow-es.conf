input {
    kinesis {
        kinesis_stream_name => "{{stream-name}}"
        application_name => "{{checkpoint-ddb}}"
        region => "{{aws-region}}"
    }
}

filter {

    # first decode the csv format.
    ruby {
        code => "
@col_names = [
    'app_id','platform','etl_tstamp','collector_tstamp','dvce_created_tstamp','event',
    'event_id','txn_id','name_tracker','v_tracker','v_collector','v_etl','user_id','user_ipaddress',
    'user_fingerprint','domain_userid','domain_sessionidx','network_userid','geo_country',
    'geo_region','geo_city','geo_zipcode','geo_latitude','geo_longitude','geo_region_name',
    'ip_isp','ip_organization','ip_domain','ip_netspeed','page_url','page_title','page_referrer',
    'page_urlscheme','page_urlhost','page_urlport','page_urlpath','page_urlquery',
    'page_urlfragment','refr_urlscheme','refr_urlhost','refr_urlport','refr_urlpath','refr_urlquery',
    'refr_urlfragment','refr_medium','refr_source','refr_term','mkt_medium','mkt_source','mkt_term',
    'mkt_content','mkt_campaign','contexts','se_category','se_action','se_label','se_property',
    'se_value','unstruct_event','tr_orderid','tr_affiliation','tr_total','tr_tax','tr_shipping',
    'tr_city','tr_state','tr_country','ti_orderid','ti_sku','ti_name','ti_category','ti_price',
    'ti_quantity','pp_xoffset_min','pp_xoffset_max','pp_yoffset_min','pp_yoffset_max','useragent',
    'br_name','br_family','br_version','br_type','br_renderengine','br_lang','br_features_pdf',
    'br_features_flash','br_features_java','br_features_director','br_features_quicktime',
    'br_features_realplayer','br_features_windowsmedia','br_features_gears','br_features_silverlight',
    'br_cookies','br_colordepth','br_viewwidth','br_viewheight','os_name','os_family',
    'os_manufacturer','os_timezone','dvce_type','dvce_ismobile','dvce_screenwidth',
    'dvce_screenheight','doc_charset','doc_width','doc_height','tr_currency','tr_total_base',
    'tr_tax_base','tr_shipping_base','ti_currency','ti_price_base','base_currency','geo_timezone',
    'mkt_clickid','mkt_network','etl_tags','dvce_sent_tstamp','refr_domain_userid','refr_dvce_tstamp',
    'derived_contexts','domain_sessionid','derived_tstamp','event_vendor','event_name',
    'event_format','event_version','event_fingerprint','true_tstamp'];
event.get('message').split('	').each_with_index { |val, index| event.set(@col_names[index], val); }
"
        # it is critical the .split('	') <- is \t. logstash config does not support escape char \t.
        remove_field => "message"
    }

    # then decode the client context
    json {
        source => "contexts"
        remove_field => "contexts"
    }
    ruby {
        code => "
event.get('data').each do |val|
  schema = 'ctx_' + val['schema'].split('/')[1]
  event.set(schema, val['data'])
end
"
        remove_field => "data"
        remove_field => "schema"
    }
    # then decode the client context
    json {
        source => "derived_contexts"
        remove_field => "derived_contexts"
    }
    ruby {
        code => "
event.get('data').each do |val|
  schema = 'drv_' + val['schema'].split('/')[1]
  event.set(schema, val['data'])
end
"
        remove_field => "data"
        remove_field => "schema"
    }

    date {
        match => ["collector_tstamp", "YYYY-MM-dd HH:mm:ss.SSS"]
    }
    date {
        match => ["etl_tstamp", "YYYY-MM-dd HH:mm:ss.SSS"]
        target => "etl_tstamp"
    }
    date {
        match => ["dvce_created_tstamp", "YYYY-MM-dd HH:mm:ss.SSS"]
        target => "dvce_created_tstamp"
    }
    date {
        match => ["dvce_sent_tstamp", "YYYY-MM-dd HH:mm:ss.SSS"]
        target => "dvce_sent_tstamp"
    }
    date {
        match => ["drv_normalise_layer.device_timezone_offset", "YYYY-MM-dd HH:mm:ss.SSS"]
        target => "drv_normalise_layer.device_timezone_offset"
    }

    useragent {
        source => "useragent"
    }
    geoip {
        source => "user_ipaddress"
    }
    mutate {
        convert => { "dvce_screenwidth" => "integer" }
        convert => { "dvce_screenheight" => "integer" }
        convert => { "doc_width" => "integer" }
        convert => { "doc_height" => "integer" }
    }
}

output {
    elasticsearch {
        index => "logstash-{{index-name}}-%{+YYYY.MM.dd}"
        document_id => "%{event_id}"
        hosts => ["{{es-host}}:9200"]
    }
}
